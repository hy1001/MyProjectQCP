getwd()
library(car)
library(cars)
library(iris)
library(foreign)
ls()
q()
install.packages("RxODE")
install.packages("Rcpp")
install.packages("devtools")
library(devtools)
install_github("metrumresearchgroup/mrgsolve@v0.7.1", subdir="rdev", type="source")
install.packages("Rtools")
install_github("metrumresearchgroup/mrgsolve@v0.7.1", subdir="rdev", type="source")
gwtwd()
getwd()
setwd("C:/Users/khfx644/Cygwin/home/khfx644/Projects/industrialization/IQM/INSTALL/IQMtoolsSuite/IQMlite/classes/@IQMmodel/")
dirs()
dir()
getwd()
nocheck         = 0;
useSBMLnames    = 0;
stripSBMLinfo   = 0;
if ~isnumeric(nocheck),
isnumeric
numeric
is.numeric(1)
if !is.numeric(nocheck),
error('Problem with IQMmodel');
end
if ( ! is.numeric(nocheck) )
error('Problem with IQMmodel');
end
if ( ! is.numeric(nocheck) ) {
error('Problem with IQMmodel');
}
error('Problem with IQMmodel');
nocheck <- "a"
if ( !is.numeric(nocheck) ) {
stop('Problem with IQMmodel');
}
nocheck <- 0
nargin = 0
if nargin == 0
inputType = 'empty';
if ( nargin == 0 )
inputType = 'empty';
nocheck         = 0;
useSBMLnames    = 0;
stripSBMLinfo   = 0;
nargin = nargs();
nargin = 0;
if nargin > 1,
nocheck = varargin{2};
end
if nargin > 2,
if ( !is.numeric(nocheck) ) {
stop('Problem with IQMmodel');
}
if ( nargin == 0 )
inputType = 'empty';
if ( inputType == 'empty' ) {
inputsStruct = list(
name = list(),
);
}
if ( inputType == 'empty' ) {
inputsStruct = list(
name = list()
);
}
source('C:/Users/khfx644/Cygwin/home/khfx644/Projects/industrialization/IQM/INSTALL/IQMtoolsSuite/IQMlite/classes/@IQMmodel/IQMmodel.R')
if ( inputType == 'empty' ) {
inputsStruct = list(
name = list(),
factors = list(),
terms = list(),
stateindex = list(),
parindex = list()
);
### #% outputs substructure
### outputsStruct = struct('name',{},'formula',{},'notes',{},'varindex',{});
### #% functions substructure
### functionsStruct = struct('name',{},'arguments',{},'formula',{},'notes',{});
### #% states substructure
### statesStruct = struct('name',{},'initialCondition',{},'ODE',{},'type',{},'compartment',{},'unittype',{},'notes',{});
### #% algebraic substructure
### algebraicStruct = struct('name',{},'formula',{},'initialCondition',{},'type',{},'compartment',{},'unittype',{},'notes',{});
### #% parameters substructure
### parametersStruct = struct('name',{},'value',{},'type',{},'compartment',{},'unittype',{},'notes',{});
}
#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%
#% CONSTRUCT THE IQMMODEL OBJECT
#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%#%
if ( inputType == 'empty' ) {
#% Create empty IQMstructure
#% inputs substructure
#    inputsStruct = struct('name',{},'factors',{},'terms',{},'stateindex',{},'parindex',{});
inputsStruct = list(
name = list(),
factors = list(),
terms = list(),
stateindex = list(),
parindex = list()
);
### #% outputs substructure
### outputsStruct = struct('name',{},'formula',{},'notes',{},'varindex',{});
outputStruct = list(
name = list(),
formula = list(),
notes = list(),
varindex = list()
);
### #% functions substructure
### functionsStruct = struct('name',{},'arguments',{},'formula',{},'notes',{});
### #% states substructure
### statesStruct = struct('name',{},'initialCondition',{},'ODE',{},'type',{},'compartment',{},'unittype',{},'notes',{});
### #% algebraic substructure
### algebraicStruct = struct('name',{},'formula',{},'initialCondition',{},'type',{},'compartment',{},'unittype',{},'notes',{});
### #% parameters substructure
### parametersStruct = struct('name',{},'value',{},'type',{},'compartment',{},'unittype',{},'notes',{});
### #% variables substructure
### variablesStruct = struct('name',{},'formula',{},'type',{},'compartment',{},'unittype',{},'notes',{});
### #% reactions substructure
### reactionsStruct = struct('name',{},'formula',{},'notes',{},'reversible',{},'fast',{});
### #% event assignment substructure
### eventassignmentStruct = struct('variable',{},'formula',{});
### #% event substructure
### eventStruct = struct('name',{},'trigger',{},'assignment',eventassignmentStruct,'notes',{});
### #% Create IQMstructure
### IQMstructure = struct('name','unnamed_model','notes','','functions',functionsStruct,'states',statesStruct,'algebraic',algebraicStruct,'parameters',parametersStruct,'variables',variablesStruct,'reactions',reactionsStruct,'events',eventStruct,'functionsMATLAB','','inputs',inputsStruct,'outputs',outputsStruct);
### #% construct the model object
### model = class(IQMstructure,'IQMmodel');
}
?NaN
NaN(3,1)
NaN(3,1)
NaN
list()
ls()
rm(ls())
install.packages("devtools")
install.packages("testthat")
setwd("C:/Users/khfx644/Cygwin/home/khfx644/Projects/industrialization/IQM/INSTALL/IQMtoolsSuite/IQMlite/classes/@IQMmodel")
clear
