removeCharacters( substr( variables, variablesStart[ 1 ], variablesStart[ 2 ] -1 ) )
removeCharacters( substr( variables, variablesStart[ 2 ], variablesStart[ 3 ] -1 ) )
ttt <- ''
ttt
nzchar( ttt )
!nzchar( ttt )
variableString <- removeCharacters( substr( variables, variablesStart[ 1 ], variablesStart[ 2 ] -1 ) )
variableString
gregexpr( "=", variableString )
gregexpr( "=", variableString )[[1]]
gregexpr( "=", variableString )[[1]][]1
gregexpr( "=", variableString )[[1]][1]
is(  gregexpr( "=", variableString )[[1]][1] )
is(  as.numeric( gregexpr( "=", variableString )[[1]][1] ) )
gregexpr( "=", "abc = edf = 5 ")
gregexpr( "=", "abc = edf = 5 ")[[1]][1]
gregexpr( "=", "abc = edf = 5 ")[[1]][2]
temp = gregexpr( "=", variableString )[[1]][1];
temp
test = substr( varaibleString, 1, temp - 1 );
test = substr( variableString, 1, temp - 1 );  
test
getVariables <- function (variables) {
        error = '';
## %    variables = removeWhiteSpace(variables);
        ### IQMvariables = list(
        ###          name = c(),
        ###          formula = c(),
        ###          type = c(),
        ###          compartment = c(),
        ###          unittype = c(),
        ###          notes = c()
        ###          );
## % get the starting indices for the variables by finding the index
## % of the last '\n' before the '=' for each variable
        ##variablesStart = regexp([10 variables],['\n[^\n=]*=']);
        ## this is an array for starting locations of each variable
        variablesStart <- as.numeric( gregexpr ( "\n\\S+", variables )[[1]] );
## % run through the variables and process them (+1 since endindex = end-1)
## variablesStart = [variablesStart length(variables)+1];
        variablesStart <- c( variablesStart , nchar( variables ) ) #adding the end pos of variables, but why?
### ## for k = 1:length(variablesStart)-1,
##     IQMvariables(k).formula = formula;
##     % add default notes to variable
##     IQMvariables(k).notes = notes;
##     % add information to parameter
##     IQMvariables(k).type = type;
##     IQMvariables(k).compartment = compartment;
##     IQMvariables(k).unittype = unittype;
## end ## end of for loop
for ( k in 1:( length( variablesStart )-1 )  ) {
    variableString = removeCharacters(  substr( variables, variablesStart[ k ], variablesStart[ k ] -1 ) )
    informationText = ''; ## leave this empty for now
    if ( !nzchar( informationText ) ) { ## if informationText is not empty,
    }
    else { ## if informationText is empty
         type = '';
         compartment = '';
         unittype = '';
    }
    ##% extract the variable name
    temp = gregexpr( "=", variableString )[[1]][1]; # if multiple ='s, always take the first one.
    test = substr( variableString, 1, temp - 1 );
    ##% check if variable name given
    if ( nzchar ) {
       error = "At least one variable name not given.";
       #return( list( my.IQMmodel, error ) )
    }
##     if isempty(formula),
##         error = sprintf('At least one variable definition not given.');
##         return
##     end
    ### IQMvarialbes is an array of list
    IQMvariables[ [ k ] ].formula <- formula;
    ##% add default notes to variable
    IQMvariables[[ k ]].notes = notes;
    ##% add information to parameter
    IQMvariables[[ k ]].type = type;
    IQMvariables[[ k ]].compartment = compartment;
    IQMvariables[[ k ]].unittype = unittype;
} # end of for loop
return( list( IQMvariables, error ) )
## return
} ## end of getVariables
## function [IQMvariables, error] = getVariables(variables)
getVariables <- function (variables) {
        error = '';
## %    variables = removeWhiteSpace(variables);
        ### IQMvariables = list(
        ###          name = c(),
        ###          formula = c(),
        ###          type = c(),
        ###          compartment = c(),
        ###          unittype = c(),
        ###          notes = c()
        ###          );
## % get the starting indices for the variables by finding the index
## % of the last '\n' before the '=' for each variable
        ##variablesStart = regexp([10 variables],['\n[^\n=]*=']);
        ## this is an array for starting locations of each variable
        variablesStart <- as.numeric( gregexpr ( "\n\\S+", variables )[[1]] );
## % run through the variables and process them (+1 since endindex = end-1)
## variablesStart = [variablesStart length(variables)+1];
        variablesStart <- c( variablesStart , nchar( variables ) ) #adding the end pos of variables, but why?
### ## for k = 1:length(variablesStart)-1,
### ##     variableString = removeCharacters(variables(variablesStart(k):variablesStart(k+1)-1));
### ##     % check if additional information is present ... if yes, cut it out
### ##     infoStart = strfind(variableString,'{');
### ##     infoEnd = strfind(variableString,'}');
###      informationText = '';
### ##     if length(infoStart) + length(infoEnd) > 2,
### ##         error = 'To many curly parentheses in a variable definition';
### ##         return
### ##     end
##     IQMvariables(k).compartment = compartment;
##     IQMvariables(k).unittype = unittype;
## end ## end of for loop
for ( k in 1:( length( variablesStart )-1 )  ) {
    variableString = removeCharacters(  substr( variables, variablesStart[ k ], variablesStart[ k ] -1 ) )
    informationText = ''; ## leave this empty for now
    if ( !nzchar( informationText ) ) { ## if informationText is not empty,
    }
    else { ## if informationText is empty
         type = '';
         compartment = '';
         unittype = '';
    }
    ##% extract the variable name
    temp = gregexpr( "=", variableString )[[1]][1]; # if multiple ='s, always take the first one.
    test = substr( variableString, 1, temp - 1 );
    ##% check if variable name given
    if ( nzchar ) {
       error = "At least one variable name not given.";
       #return( list( my.IQMmodel, error ) )
    }
##     IQMvariables(k).name = removeWhiteSpace(test);
##     % extract the variable value
##     test = variableString(temp+1:end);
##     end
##     % check if variable expression given
##     if isempty(formula),
##         error = sprintf('At least one variable definition not given.');
##         return
##     end
    ### IQMvarialbes is an array of list
    IQMvariables[ [ k ] ]$formula <- formula;
    ##% add default notes to variable
    IQMvariables[[ k ]]$notes = notes;
    ##% add information to parameter
    IQMvariables[[ k ]]$type = type;
    IQMvariables[[ k ]]$compartment = compartment;
    IQMvariables[[ k ]]$unittype = unittype;
} # end of for loop
return( list( IQMvariables, error ) )
## return
} ## end of getVariables
getVariables <- function (variables) {
        error = '';
## % get the starting indices for the variables by finding the index
## % of the last '\n' before the '=' for each variable
        ## this is an array for starting locations of each variable
        variablesStart <- as.numeric( gregexpr ( "\n\\S+", variables )[[1]] );
## % run through the variables and process them (+1 since endindex = end-1)
## variablesStart = [variablesStart length(variables)+1];
        variablesStart <- c( variablesStart , nchar( variables ) ) #adding the end pos of variables, but why?
for ( k in 1:( length( variablesStart )-1 )  ) {
    variableString = removeCharacters(  substr( variables, variablesStart[ k ], variablesStart[ k ] -1 ) )
    informationText = ''; ## leave this empty for now
    if ( !nzchar( informationText ) ) { ## if informationText is not empty,
    }
    else { ## if informationText is empty
         type = '';
         compartment = '';
         unittype = '';
    }
    ##% extract the variable name
    temp = gregexpr( "=", variableString )[[1]][1]; # if multiple ='s, always take the first one.
    test = substr( variableString, 1, temp - 1 );
    ##% check if variable name given
    if ( nzchar ) {
       error = "At least one variable name not given.";
       #return( list( my.IQMmodel, error ) )
    }
    IQMvarialbes[[ k ]]$name <- removeWhiteSpace( test )
    ##% extract the variable value
    test = substr( variableString, temp + 1, nchar( variableString ) )
##     % The test string contains now the variable expression and
##     % eventually also a comment that should be written into notes.
##     % check if a comment is present
    temp = gregexpr( "%", test )[[1]][1];
    if ( temp > 0 ) {
       formula <- removeWhiteSpace( substr( test, 1, temp - 1 ))
       notes <- substr( test, temp + 1, nchar( test ) )
    } else {
      formula <- removeWhiteSpace( test )
      notes <- ""
    }
    if ( nzchar( formula ) ) {
       error = "At least one variable definition not given.";
    }
    ### IQMvarialbes is an array of list
    IQMvariables[[ k ]]$formula <- formula;
    ##% add default notes to variable
    IQMvariables[[ k ]]$notes = notes;
    ##% add information to parameter
    IQMvariables[[ k ]]$type = type;
    IQMvariables[[ k ]]$compartment = compartment;
    IQMvariables[[ k ]]$unittype = unittype;
} # end of for loop
return( list( IQMvariables, error ) )
## return
} ## end of getVariables
ls()
variables
getVariables( variables )
       variablesStart <- as.numeric( gregexpr ( "\n\\S+", variables )[[1]] );
variablesStart
## variablesStart = [variablesStart length(variables)+1];
        variablesStart <- c( variablesStart , nchar( variables ) ) #adding the end pos of variables, but why?
k <- c(1)
k
 variableString = removeCharacters(  substr( variables, variablesStart[ k ], variablesStart[ k ] -1 ) )
variableString
removeCharacters
 substr( variables, variablesStart[ k ], variablesStart[ k ] -1 )
variables
variablesStart
variablesStart[ 1 ]
( variableString = removeCharacters(  substr( variables, variablesStart[ k ], variablesStart[ k + 1 ] -1 ) ))
    informationText = ''; ## leave this empty for now
    if ( !nzchar( informationText ) ) { ## if informationText is not empty,
    }
    else { ## if informationText is empty
         type = '';
         compartment = '';
         unittype = '';
    }
informationText
nzchar( informationText )
nchar( informationText )
if ( FALSE ) { } else { print ("I") }
    informationText = ''; ## leave this empty for now
    if ( nzchar( informationText ) ) { ## if informationText is not empty,
    }
    else { ## if informationText is empty
         type = '';
         compartment = '';
         unittype = '';
    }
    if ( nzchar( informationText ) ) { ## if informationText is not empty,
    } else { ## if informationText is empty
         type = '';
         compartment = '';
         unittype = '';
    }
error
    temp = gregexpr( "=", variableString )[[1]][1]; # if multiple ='s, always take the first one.
    test = substr( variableString, 1, temp - 1 );
    ##% check if variable name given
    if ( nzchar( test ) ) {
       error = "At least one variable name not given.";
       #return( list( my.IQMmodel, error ) )
    }
temp
test
error
    temp = gregexpr( "=", variableString )[[1]][1]; # if multiple ='s, always take the first one.
    test = substr( variableString, 1, temp - 1 );
    ##% check if variable name given
    if ( !nzchar( test ) ) {
       error = "At least one variable name not given.";
       #return( list( my.IQMmodel, error ) )
    }
error
rm( error )
    temp = gregexpr( "=", variableString )[[1]][1]; # if multiple ='s, always take the first one.
    test = substr( variableString, 1, temp - 1 );
    ##% check if variable name given
    if ( !nzchar( test ) ) {
       error = "At least one variable name not given.";
       #return( list( my.IQMmodel, error ) )
    }
error
test
k
    IQMvarialbes[[ k ]]$name <- removeWhiteSpace( test )
## % seen in some example models
## function [outputString] = removeWhiteSpace(inputString)
removeWhiteSpace <- function( inputString ) {
                 outputString = gsub ( " ", "", inputString );
                 return( outputString );
}
## %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### function [output] = removeCharacters(input)
removeCharacters <-  function ( input ) {
### % delete all line breaks and tabs from the input string
    temp = input ;
    temp = gsub( "\n", " ", temp )
    temp = gsub( "\t", " ", temp )
    temp
}
    IQMvarialbes[[ k ]]$name <- removeWhiteSpace( test )
IQMvariables <- list()
    IQMvarialbes[[ k ]]$name <- removeWhiteSpace( test )
    IQMvariables[[ k ]]$name <- removeWhiteSpace( test )
    IQMvariables[[ 1 ]]$name <- removeWhiteSpace( test )
IQMvariables <- array( list( ), 2)
    IQMvariables[[ 1 ]]$name <- removeWhiteSpace( test )
IQMvariables
    test = substr( variableString, temp + 1, nchar( variableString ) )
##     % The test string contains now the variable expression and
test
    temp = gregexpr( "%", test )[[1]][1];
    if ( temp > 0 ) {
       formula <- removeWhiteSpace( substr( test, 1, temp - 1 ))
       notes <- substr( test, temp + 1, nchar( test ) )
    } else {
      formula <- removeWhiteSpace( test )
      notes <- ""
    }
notes
    if ( nzchar( formula ) ) {
       error = "At least one variable definition not given.";
    }
error
    ### IQMvarialbes is an array of list
    IQMvariables[[ k ]]$formula <- formula;
    ##% add default notes to variable
    IQMvariables[[ k ]]$notes = notes;
    ##% add information to parameter
    IQMvariables[[ k ]]$type = type;
    IQMvariables[[ k ]]$compartment = compartment;
    IQMvariables[[ k ]]$unittype = unittype;
IQMvariables
## function [IQMvariables, error] = getVariables(variables)
getVariables <- function (variables) {
        error = '';
## % get the starting indices for the variables by finding the index
## % of the last '\n' before the '=' for each variable
        ## this is an array for starting locations of each variable
        variablesStart <- as.numeric( gregexpr ( "\n\\S+", variables )[[1]] );
        IQMvariables <- array( list(), length( variablesStart ) )
## % run through the variables and process them (+1 since endindex = end-1)
## variablesStart = [variablesStart length(variables)+1];
        variablesStart <- c( variablesStart , nchar( variables ) ) #adding the end pos of variables, but why?
for ( k in 1:( length( variablesStart )-1 )  ) {
    variableString = removeCharacters(  substr( variables, variablesStart[ k ], variablesStart[ k + 1 ] -1 ) )
    informationText = ''; ## leave this empty for now
    if ( nzchar( informationText ) ) { ## if informationText is not empty,
    } else { ## if informationText is empty
         type = '';
         compartment = '';
         unittype = '';
    }
    ##% extract the variable name
    temp = gregexpr( "=", variableString )[[1]][1]; # if multiple ='s, always take the first one.
    test = substr( variableString, 1, temp - 1 );
    ##% check if variable name given
    if ( !nzchar( test ) ) {
       error = "At least one variable name not given.";
       #return( list( my.IQMmodel, error ) )
    }
    IQMvariables[[ k ]]$name <- removeWhiteSpace( test )
    ##% extract the variable value
    test = substr( variableString, temp + 1, nchar( variableString ) )
##     % The test string contains now the variable expression and
##     % eventually also a comment that should be written into notes.
##     % check if a comment is present
    temp = gregexpr( "%", test )[[1]][1];
    if ( temp > 0 ) {
       formula <- removeWhiteSpace( substr( test, 1, temp - 1 ))
       notes <- substr( test, temp + 1, nchar( test ) )
    } else {
      formula <- removeWhiteSpace( test )
      notes <- ""
    }
    if ( !nzchar( formula ) ) {
       error = "At least one variable definition not given.";
    }
    ### IQMvarialbes is an array of list
    IQMvariables[[ k ]]$formula <- formula;
    ##% add default notes to variable
    IQMvariables[[ k ]]$notes = notes;
    ##% add information to parameter
    IQMvariables[[ k ]]$type = type;
    IQMvariables[[ k ]]$compartment = compartment;
    IQMvariables[[ k ]]$unittype = unittype;
} # end of for loop
return( list( IQMvariables, error ) )
## return
} ## end of getVariables
variables
getVariables( variables )
getVariables <- function (variables) {
        error = '';
## % get the starting indices for the variables by finding the index
## % of the last '\n' before the '=' for each variable
        ## this is an array for starting locations of each variable
        variablesStart <- as.numeric( gregexpr ( "\n\\S+", variables )[[1]] );
        IQMvariables <- array( list(), length( variablesStart ) )
## % run through the variables and process them (+1 since endindex = end-1)
## variablesStart = [variablesStart length(variables)+1];
        variablesStart <- c( variablesStart , nchar( variables ) ) #adding the end pos of variables, but why?
for ( k in 1:( length( variablesStart )-1 )  ) {
    variableString = removeCharacters(  substr( variables, variablesStart[ k ], variablesStart[ k + 1 ] -1 ) )
    informationText = ''; ## leave this empty for now
    if ( nzchar( informationText ) ) { ## if informationText is not empty,
    } else { ## if informationText is empty
         type = '';
         compartment = '';
         unittype = '';
    }
    ##% extract the variable name
    temp = gregexpr( "=", variableString )[[1]][1]; # if multiple ='s, always take the first one.
    test = substr( variableString, 1, temp - 1 );
    ##% check if variable name given
    if ( !nzchar( test ) ) {
       error = "At least one variable name not given.";
       #return( list( my.IQMmodel, error ) )
    }
    IQMvariables[[ k ]]$name <- removeWhiteSpace( test )
    ##% extract the variable value
    test = substr( variableString, temp + 1, nchar( variableString ) )
##     % The test string contains now the variable expression and
##     % eventually also a comment that should be written into notes.
##     % check if a comment is present
    temp = gregexpr( "%", test )[[1]][1];
    if ( temp > 0 ) {
       formula <- removeWhiteSpace( substr( test, 1, temp - 1 ))
       notes <- substr( test, temp + 1, nchar( test ) )
    } else {
      formula <- removeWhiteSpace( test )
      notes <- ""
    }
    if ( !nzchar( formula ) ) {
       error = "At least one variable definition not given.";
    }
    ### IQMvarialbes is an array of list
    IQMvariables[[ k ]]$formula <- formula;
    ##% add default notes to variable
    IQMvariables[[ k ]]$notes = notes;
    ##% add information to parameter
    IQMvariables[[ k ]]$type = type;
    IQMvariables[[ k ]]$compartment = compartment;
    IQMvariables[[ k ]]$unittype = unittype;
} # end of for loop
return( list( IQMvariables <- IQMvariables, error <- error ) )
## return
} ## end of getVariables
variables
getVariables( variables )
r <- getVariables( variables )
r$IQMvariables
length( r )
getVariables <- function (variables) {
        error = '';
## % get the starting indices for the variables by finding the index
## % of the last '\n' before the '=' for each variable
        ## this is an array for starting locations of each variable
        variablesStart <- as.numeric( gregexpr ( "\n\\S+", variables )[[1]] );
        IQMvariables <- array( list(), length( variablesStart ) )
## % run through the variables and process them (+1 since endindex = end-1)
## variablesStart = [variablesStart length(variables)+1];
        variablesStart <- c( variablesStart , nchar( variables ) ) #adding the end pos of variables, but why?
for ( k in 1:( length( variablesStart )-1 )  ) {
    variableString = removeCharacters(  substr( variables, variablesStart[ k ], variablesStart[ k + 1 ] -1 ) )
    informationText = ''; ## leave this empty for now
    if ( nzchar( informationText ) ) { ## if informationText is not empty,
    } else { ## if informationText is empty
         type = '';
         compartment = '';
         unittype = '';
    }
    ##% extract the variable name
    temp = gregexpr( "=", variableString )[[1]][1]; # if multiple ='s, always take the first one.
    test = substr( variableString, 1, temp - 1 );
    ##% check if variable name given
    if ( !nzchar( test ) ) {
       error = "At least one variable name not given.";
       #return( list( my.IQMmodel, error ) )
    }
    IQMvariables[[ k ]]$name <- removeWhiteSpace( test )
    ##% extract the variable value
    test = substr( variableString, temp + 1, nchar( variableString ) )
##     % The test string contains now the variable expression and
##     % eventually also a comment that should be written into notes.
##     % check if a comment is present
    temp = gregexpr( "%", test )[[1]][1];
    if ( temp > 0 ) {
       formula <- removeWhiteSpace( substr( test, 1, temp - 1 ))
       notes <- substr( test, temp + 1, nchar( test ) )
    } else {
      formula <- removeWhiteSpace( test )
      notes <- ""
    }
    if ( !nzchar( formula ) ) {
       error = "At least one variable definition not given.";
    }
    ### IQMvarialbes is an array of list
    IQMvariables[[ k ]]$formula <- formula;
    ##% add default notes to variable
    IQMvariables[[ k ]]$notes = notes;
    ##% add information to parameter
    IQMvariables[[ k ]]$type = type;
    IQMvariables[[ k ]]$compartment = compartment;
    IQMvariables[[ k ]]$unittype = unittype;
} # end of for loop
return( list( IQMvariables = IQMvariables, error = error ) )
## return
} ## end of getVariables
getVariables( variables )
q()
